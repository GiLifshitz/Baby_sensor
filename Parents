#include <Wire.h>
#include <U8g2lib.h>
#include <WiFi.h>
#include <esp_now.h>

// Initialization of the display with hardware I2C
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 22, /* data=*/ 21);

// MAC addresses of the sender devices
uint8_t bearAddress[] = {0x44, 0x17, 0x93, 0xE0, 0xA4, 0x20};  // Bear
uint8_t mattressAddress[] = {0x34, 0x94, 0x54, 0x5F, 0x4F, 0x18};  // Mattress

// Structure to receive data
typedef struct struct_message {
    float temperature;
    float humidity;
    char message[32];
} struct_message;

// Create a struct_message instance
struct_message myData;

const int ledPin = A4; // LED pin
unsigned long lastUpdateTime = 0;
bool displayMovement = false;
unsigned long movementDisplayTime = 0;
unsigned long messageDisplayDuration = 2000;  // Duration to show movement messages

void displayTempHumidity() {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB14_tr);

    // Format the temperature and humidity data as strings
    char tempStr[32];
    char humStr[32];

    snprintf(tempStr, sizeof(tempStr), "%.2f C", myData.temperature);
    snprintf(humStr, sizeof(humStr), "%.2f %%", myData.humidity);

    // Draw each string on the OLED screen at a different Y coordinate
    u8g2.drawStr(20, 30, tempStr);
    u8g2.drawStr(20, 50, humStr);

    // Send the buffer to the OLED display
    u8g2.sendBuffer();
}

void debugPrintData() {
    Serial.print("Temperature: ");
    Serial.print(myData.temperature);
    Serial.print(" C, Humidity: ");
    Serial.print(myData.humidity);
    Serial.println(" %");
}

// Callback function to handle received data
void OnDataRecv(const esp_now_recv_info *info, const uint8_t *incomingData, int len) {
    memcpy(&myData, incomingData, sizeof(myData));
    Serial.print("Message: ");
    Serial.println(myData.message);
    
    debugPrintData();  // Print data to Serial Monitor for debugging

    if (strcmp(myData.message, "Movement detected") == 0 || strcmp(myData.message, "Movement stopped") == 0) {
        displayMovement = true;
        movementDisplayTime = millis();
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);
//        u8g2.drawStr(10, 30, myData.message);
//        u8g2.drawStr(10, 30, "Movment");
        u8g2.sendBuffer();
    } else {
        displayTempHumidity();
    }

    // LED control
    if (strcmp(myData.message, "Movement detected") == 0) {
        digitalWrite(ledPin, HIGH);  // Turn on LED
    } else if (strcmp(myData.message, "Movement stopped") == 0) {
        digitalWrite(ledPin, LOW);   // Turn off LED
    }
}

void setup() {
    Serial.begin(115200); // Start serial for debugging
    u8g2.begin(); // Initialize the display
    pinMode(ledPin, OUTPUT);
    digitalWrite(ledPin, LOW); // Start with LED off

    // Initialize WiFi for ESP-NOW
    WiFi.mode(WIFI_STA);
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    } else {
        Serial.println("ESP-NOW initialized");
    }

    // Register callback function to handle received data
    esp_now_register_recv_cb(OnDataRecv);
    
    // Add Bear as peer
    esp_now_peer_info_t bearPeerInfo = {};
    memcpy(bearPeerInfo.peer_addr, bearAddress, 6);
    bearPeerInfo.channel = 0;  
    bearPeerInfo.encrypt = false;
    if (esp_now_add_peer(&bearPeerInfo) != ESP_OK) {
        Serial.println("Failed to add Bear peer");
    } else {
        Serial.println("Bear peer added");
    }
    
    // Add Mattress as peer
    esp_now_peer_info_t mattressPeerInfo = {};
    memcpy(mattressPeerInfo.peer_addr, mattressAddress, 6);
    mattressPeerInfo.channel = 0;  
    mattressPeerInfo.encrypt = false;
    if (esp_now_add_peer(&mattressPeerInfo) != ESP_OK) {
        Serial.println("Failed to add Mattress peer");
    } else {
        Serial.println("Mattress peer added");
    }
    
    // Initial message
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(10, 30, "Waiting for messages...");
    u8g2.sendBuffer();
}

void loop() {
    unsigned long currentTime = millis();
    
    // Display movement message for a fixed duration
    if (displayMovement && (currentTime - movementDisplayTime >= messageDisplayDuration)) {
        displayMovement = false;
        displayTempHumidity();
    }

    // Update temperature and humidity every 5 minutes
    if (!displayMovement && (currentTime - lastUpdateTime >= 300000)) {
        lastUpdateTime = currentTime;
        displayTempHumidity();
    }
}
